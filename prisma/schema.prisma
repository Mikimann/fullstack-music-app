// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generator block specifies the provider for the client library
generator client {
  provider = "prisma-client-js"
}

// Datasource block specifies the provider for the database and connection details
// url specifies the connection URL for the database and shadowDatabaseUrl specifies the connection URL for a read replica of the database
// The connection URL is read from environment variables

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Model block specifies the database schema, each block represents a table in the database

// User table has columns for user details and a one-to-many relation with the Playlist table
model User{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  firstName String
  lastName String
  password String 
  playlists Playlist[]
}

// Song table has columns for song details and a many-to-one relation with the Artist table and a many-to-many relation with the Playlist table
model Song{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  artist Artist @relation(fields: [artistId], references: [id])
  artistId Int
  playlists Playlist[]
  duration Int
  url String
}

// Artist table has columns for artist details and a one-to-many relation with the Song table
model Artist {
  id Int @id @default(autoincrement()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs Song[]
  name String @unique
}

// Playlist table has columns for playlist details and a many-to-one relation with the User 
model Playlist{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  songs Song[] 
  user User @relation(fields:[userId], references: [id])
  userId Int
}
